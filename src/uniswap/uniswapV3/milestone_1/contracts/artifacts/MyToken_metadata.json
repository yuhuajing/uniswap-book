{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "_symbol",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "_decimals",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AllowanceOverflow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AllowanceUnderflow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyInitialized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidPermit",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NewOwnerIsZeroAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NoHandoverRequest",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Permit2AllowanceIsFixedAtInfinity",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PermitExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TotalSupplyOverflow",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Unauthorized",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pendingOwner",
						"type": "address"
					}
				],
				"name": "OwnershipHandoverCanceled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pendingOwner",
						"type": "address"
					}
				],
				"name": "OwnershipHandoverRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "result",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cancelOwnershipHandover",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pendingOwner",
						"type": "address"
					}
				],
				"name": "completeOwnershipHandover",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "decimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "nonces",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "result",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pendingOwner",
						"type": "address"
					}
				],
				"name": "ownershipHandoverExpiresAt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "v",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "r",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requestOwnershipHandover",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Solady (https://github.com/Vectorized/solady/blob/main/src/tokens/ERC20.sol)",
			"errors": {
				"AllowanceOverflow()": [
					{
						"details": "The allowance has overflowed."
					}
				],
				"AllowanceUnderflow()": [
					{
						"details": "The allowance has underflowed."
					}
				],
				"AlreadyInitialized()": [
					{
						"details": "Cannot double-initialize."
					}
				],
				"InsufficientAllowance()": [
					{
						"details": "Insufficient allowance."
					}
				],
				"InsufficientBalance()": [
					{
						"details": "Insufficient balance."
					}
				],
				"InvalidPermit()": [
					{
						"details": "The permit is invalid."
					}
				],
				"NewOwnerIsZeroAddress()": [
					{
						"details": "The `newOwner` cannot be the zero address."
					}
				],
				"NoHandoverRequest()": [
					{
						"details": "The `pendingOwner` does not have a valid handover request."
					}
				],
				"Permit2AllowanceIsFixedAtInfinity()": [
					{
						"details": "The allowance of Permit2 is fixed at infinity."
					}
				],
				"PermitExpired()": [
					{
						"details": "The permit has expired."
					}
				],
				"TotalSupplyOverflow()": [
					{
						"details": "The total supply has overflowed."
					}
				],
				"Unauthorized()": [
					{
						"details": "The caller is not authorized to call the function."
					}
				]
			},
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when `amount` tokens is approved by `owner` to be used by `spender`."
				},
				"OwnershipHandoverCanceled(address)": {
					"details": "The ownership handover to `pendingOwner` has been canceled."
				},
				"OwnershipHandoverRequested(address)": {
					"details": "An ownership handover to `pendingOwner` has been requested."
				},
				"OwnershipTransferred(address,address)": {
					"details": "The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `amount` tokens is transferred from `from` to `to`."
				}
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Returns the EIP-712 domain separator for the EIP-2612 permit."
				},
				"allowance(address,address)": {
					"details": "Returns the amount of tokens that `spender` can spend on behalf of `owner`."
				},
				"approve(address,uint256)": {
					"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Emits a {Approval} event."
				},
				"balanceOf(address)": {
					"details": "Returns the amount of tokens owned by `owner`."
				},
				"cancelOwnershipHandover()": {
					"details": "Cancels the two-step ownership handover to the caller, if any."
				},
				"completeOwnershipHandover(address)": {
					"details": "Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."
				},
				"decimals()": {
					"details": "Returns the number of decimals used to get its user representation"
				},
				"name()": {
					"details": "Returns the name of the token"
				},
				"nonces(address)": {
					"details": "Returns the current nonce for `owner`. This value is used to compute the signature for EIP-2612 permit."
				},
				"owner()": {
					"details": "Returns the owner of the contract."
				},
				"ownershipHandoverExpiresAt(address)": {
					"details": "Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."
				},
				"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
					"details": "Sets `value` as the allowance of `spender` over the tokens of `owner`, authorized by a signed approval by `owner`. Emits a {Approval} event."
				},
				"renounceOwnership()": {
					"details": "Allows the owner to renounce their ownership."
				},
				"requestOwnershipHandover()": {
					"details": "Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default."
				},
				"symbol()": {
					"details": "Returns the symbol of the token"
				},
				"totalSupply()": {
					"details": "Returns the amount of tokens in existence."
				},
				"transfer(address,uint256)": {
					"details": "Transfer `amount` tokens from the caller to `to`. Requirements: - `from` must at least have `amount`. Emits a {Transfer} event."
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers `amount` tokens from `from` to `to`. Note: Does not update the allowance if it is the maximum uint256 value. Requirements: - `from` must at least have `amount`. - The caller must have at least `amount` of allowance to transfer the tokens of `from`. Emits a {Transfer} event."
				},
				"transferOwnership(address)": {
					"details": "Allows the owner to transfer the ownership to `newOwner`."
				}
			},
			"title": "ERC20MultiTransferOwnable",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"tokena.sol": "MyToken"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"solady/src/auth/Ownable.sol": {
			"keccak256": "0xc208cdd9de02bbf4b5edad18b88e23a2be7ff56d2287d5649329dc7cda64b9a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://e8fba079cc7230c617f7493a2e97873f88e59a53a5018fcb2e2b6ac42d8aa5a3",
				"dweb:/ipfs/QmTXg8GSt8hsK2cZhbPFrund1mrwVdkLQmEPoQaFy4fhjs"
			]
		},
		"solady/src/tokens/ERC20.sol": {
			"keccak256": "0x19826a737039994947e9971d996e80c658f3c380705e30e7d1b5c40d35f454ac",
			"license": "MIT",
			"urls": [
				"bzz-raw://d263a519a7c567c3af3ee7b6e223e3d37863ac35d8611131a98888b54e749141",
				"dweb:/ipfs/QmUj8FZcJgx76YeFb13ZKgKBDCMwPkhycEJhZCpuEG6xUe"
			]
		},
		"tokena.sol": {
			"keccak256": "0x8fe03aed868b4f4778b0d045ba75e8ae0a05780e0be306671338f0c2a50a7b81",
			"license": "MIT",
			"urls": [
				"bzz-raw://7d26fc896b51f2d1c2b9d571b2c8326d762bb4bdb0b8c2828dd722e26b524aaa",
				"dweb:/ipfs/QmcGAQoa5kUsZFz1Yd2UgH6eMnhSa2rUZXeVe6bfjU7bf7"
			]
		}
	},
	"version": 1
}